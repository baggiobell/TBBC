//CONSTRUCTOR
//!Constructor
/*!
Allocate the space needed to fill a vector containing all the round keys.
*/
template <unsigned nb_sbox, unsigned nround>
inline
Bunny24m24k<nb_sbox,nround>::Bunny24m24k(){
  rk.resize(nround+1) ; // allocates memory for the round keys
}

/*!
Encoding function for Bunny block cipher.

- INPUT: a message m of type msgType (a bitset of dimension N) and a key k of type keyType (a bitset of dimension M).

- OUTPUT: an (encrypted) message c of the same type as m.
*/
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::msgType
Bunny24m24k<nb_sbox,nround>::encode( msgType m, keyType k ) {
  msgType c ;
  c = m ;
  keySchedule(k) ;
  //Round 0, a-tipical
  c = addRoundKey(c,rk[0]) ;
  //cout << "state at round: 0 --> " << bitsetToHex(c) << endl ;
  //Tipical rounds
  for (unsigned i = 1 ; i <= nround ; ++i){
    c = this->sBox(c) ;
    //cout << "state after sBox: --> " << bitsetToHex(c) << endl ;
    c = mixingLayer(c) ;
    //cout << "state after mixL: --> " << bitsetToHex(c) << endl ;
    c = addRoundKey(c,rk[i]) ;
    //cout << "state at round: " << i <<  " --> " << bitsetToHex(c) << endl ;
  }
  return c ;
}

/*!
Decoding function for Bunny block cipher.

- INPUT: a message m of type msgType (a bitset of dimension N) and a key k of type keyType (a bitset of dimension M).

- OUTPUT: an (decrypted) message c of the same type as m.
*/
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::msgType
Bunny24m24k<nb_sbox,nround>::decode (msgType m, keyType k) {
  msgType c ;
  c = m ;
  //keyschedule
  keySchedule(k) ;
  //Tipical rounds
  for (unsigned i = nround ; i > 0 ; --i){
    c = addRoundKey(c,rk[i]) ;
    //cout <<   "state after add round: " << i <<  " --> " << bitsetToHex(c) << endl ;
    c = mixingLayerInverse(c) ;
    //cout << "state after mixLInv: --> " << bitsetToHex(c) << endl ;
    c = this->sBoxInverse(c) ;
    //cout << "state after sBoxInv: --> " << bitsetToHex(c) << endl ;
  }
  //Round 0, a-tipical
  c = addRoundKey(c,rk[0]) ;
  return c ;
}

//////////////////////////////////////////////
///////////////KEY-SCHEDULE///////////////////
//////////////////////////////////////////////
/*!
Key-Schedule STEP - Bunny's style.

- INPUT: a master key k of type keyType.

- OUTPUT: return a pointer to a vector of msgType (this elements are the round key, which must be the same length/type as the message).
*/
template <unsigned nb_sbox, unsigned nround>
inline
void Bunny24m24k<nb_sbox,nround>::keySchedule(keyType k) {
  //number of word generated
  unsigned nword = 80 ;//(nround+10) * 4 ;//to have some more bitsj
  //dimension of the blocks that fill the round keys
  //i.e.: nrow round keys at a time are filled
  unsigned nb_msg = 24 ;
  unsigned ncol   = nb_msg/nb_sbox ;
  unsigned nrow   = nb_msg/nb_sbox + 1 ;
  vector<sboxType> w ;

  w.resize(nword) ; // initialize a vector of nword elements of type sboxType, set to 00...0

  //CREATE W, a vector of 80 words
  //put the key bits in the first 4 words
  for (unsigned i = 0 ; i < ncol ; ++i) w[i] = this->extractBlock(i,k) ;

  w[4] = sbox(0,w[0]) ^ w[1];
  w[5] = sbox(1,w[1]) ^ w[2];
  w[6] = sbox(2,w[2]) ^ w[3];
  w[7] = sbox(3,w[3]) ^ w[0];

  for (unsigned i = 8; i < w.size() ; ++i){
      // se i = 0 mod 8 => w[i] = w[i-8] ^ s2(RB(w[i-1])) + 101010
      if (i % 8 == 0) w[i] = w[i-8] ^ sbox(1,(w[i-1]<<1)) ^ sboxType (string("101010")) ;
      // se i = 4 mod 8 => w[i] = w[i-8] ^ sbox(2,w[i-1])
      else if (i % 8 == 4) w[i] = w[i-8] ^ sbox(2,w[i-1]) ;
      // se i != 0 mod 4 w[i] = w[i-8] ^ w[i-1]
      else w[i] = w[i-8] ^ w[i-1] ;
  }

  //CREATE the ROUND KEYS
  //0,5,10,15
  //1,6,11,16
  //2,7,12,17
  //3,8,13,18
  //4,9,14,19
  //..
  //20,25,30,35...
  unsigned pos = 0 ;
  for (unsigned i = 0 ; i <= nround ; ++i){
    if ( (i % nrow) == 0 ) pos = i * ncol ;
    for (unsigned j = 0 ; j < ncol ; ++j){
      rk[i] = this->insertBlock(rk[i],j,w[pos+j*nrow]) ;
    }
    ++pos ;
  }

  //Print W
  /*cout << endl ;
  cout << "k = " << k << endl ;
  cout << "W = " << endl ;
  for (unsigned i = 0; i < w.size() ; ++i){
    if (i % 4 == 3) cout << " " << w[i] << endl ;
    else cout << " " << w[i] ;
  }*/
return ;
}

///////////////////////////////
//////BUNNY Add Round Key//////
///////////////////////////////
/*!
Add round key STEP.

Sum with a round key k, which must be the same length of the message m.

- INPUT: a message m of type msgType, and a round key k of type msgType (the type must be the same as the message, otherwise they can't be added together)

- OUTPUT: the exor of m and k
*/
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::msgType
Bunny24m24k<nb_sbox,nround>::addRoundKey (msgType m, msgType k){
  return m ^ k;
}


//////////////////////////////
//////BUNNY Mixing Layer//////
//////////////////////////////
/*!
Mixing-Layer STEP.

It is always a linear function, which in the case of Bunny block cipher it is implemented as a multiplication by a 24x24 matrix.

- INPUT: a message m of type msgType.

- OUTPUT: the message m elaborated by the mixing layer.
*/
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::msgType
Bunny24m24k<nb_sbox,nround>::mixingLayer (msgType m ) {
  unsigned const nb_msg = 24 ;
  bitset<nb_msg> lambda[nb_msg] ;
  msgType c ;
  //creazione di lambda
  if (m.size() == 24) {
    lambda[0]  = bitset<nb_msg> (string("001010001000110011100101"));
    lambda[1]  = bitset<nb_msg> (string("000101000100110100111111"));
    lambda[2]  = bitset<nb_msg> (string("101111000010011010110010"));
    lambda[3]  = bitset<nb_msg> (string("111010000001001101011001"));
    lambda[4]  = bitset<nb_msg> (string("011101101101101011100001"));
    lambda[5]  = bitset<nb_msg> (string("100011111011111000111101"));
    lambda[6]  = bitset<nb_msg> (string("100001000101011000000010"));
    lambda[7]  = bitset<nb_msg> (string("111101101111001100000001"));
    lambda[8]  = bitset<nb_msg> (string("110011111010000110101101"));
    lambda[9]  = bitset<nb_msg> (string("110100011101000011111011"));
    lambda[10] = bitset<nb_msg> (string("011010100011101100110000"));
    lambda[11] = bitset<nb_msg> (string("001101111100010110011000"));
    lambda[12] = bitset<nb_msg> (string("111011110001111000001001"));
    lambda[13] = bitset<nb_msg> (string("110000110101011100101001"));
    lambda[14] = bitset<nb_msg> (string("011000110111001110111001"));
    lambda[15] = bitset<nb_msg> (string("001100110110000111110001"));
    lambda[16] = bitset<nb_msg> (string("000110011011101110110101"));
    lambda[17] = bitset<nb_msg> (string("000011100000010111110111"));
    lambda[18] = bitset<nb_msg> (string("110000011100110011001110"));
    lambda[19] = bitset<nb_msg> (string("011000001110110100000111"));
    lambda[20] = bitset<nb_msg> (string("001100000111011010101110"));
    lambda[21] = bitset<nb_msg> (string("000110101110001101010111"));
    lambda[22] = bitset<nb_msg> (string("000011010111101011100110"));
    lambda[23] = bitset<nb_msg> (string("101100100110111000010011"));

    // To acces element (I,J) of matrix lambda use:
    // lambda(I,J) = lambda[I+J*nb_msg]
    //vector x matrix PRODUCT
    for ( unsigned i = 0 ; i < nb_msg ; ++i ){
      c[i] = 0 ;
      for ( unsigned j = 0 ; j < nb_msg ; ++j ) {
        c[i] = c[i] ^ ( m[j] & lambda[nb_msg-j-1][i] ) ;
      }
    }
  }
  else if (m.size() == 128){
    /*
    lambda[0]   = bitset<nb_msg> (string("00011101100000001000000010011101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[1]   = bitset<nb_msg> (string("10000000010000000100000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[2]   = bitset<nb_msg> (string("01000000001000000010000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[3]   = bitset<nb_msg> (string("00100000000100000001000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[4]   = bitset<nb_msg> (string("00010000000010000000100000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[5]   = bitset<nb_msg> (string("00001000000001000000010000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[6]   = bitset<nb_msg> (string("00000100000000100000001000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[7]   = bitset<nb_msg> (string("00000010000000010000000100000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[8]   = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010011101000111011000000010000000"));
    lambda[9]   = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000100000000100000001000000"));
    lambda[10]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000010000000010000000100000"));
    lambda[11]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000001000000001000000010000"));
    lambda[12]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000100000000100000001000"));
    lambda[13]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000010000000010000000100"));
    lambda[14]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000001000000001000000010"));
    lambda[15]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000100000000100000001"));
    lambda[16]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000001000000010011101000111011000000000000000000000000000000000000000"));
    lambda[17]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000100000011000000100000000100000000000000000000000000000000000000"));
    lambda[18]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000010000001100000010000000010000000000000000000000000000000000000"));
    lambda[19]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000001000000110000001000000001000000000000000000000000000000000000"));
    lambda[20]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000100000011000000100000000100000000000000000000000000000000000"));
    lambda[21]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000010000001100000010000000010000000000000000000000000000000000"));
    lambda[22]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000001000000110000001000000001000000000000000000000000000000000"));
    lambda[23]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000100000011000000100000000100000000000000000000000000000000"));
    lambda[24]  = bitset<nb_msg> (string("00000000000000000000000000000000100000001000000010011101000111010000000000000000000000000000000000000000000000000000000000000000"));
    lambda[25]  = bitset<nb_msg> (string("00000000000000000000000000000000010000000100000011000000100000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[26]  = bitset<nb_msg> (string("00000000000000000000000000000000001000000010000001100000010000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[27]  = bitset<nb_msg> (string("00000000000000000000000000000000000100000001000000110000001000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[28]  = bitset<nb_msg> (string("00000000000000000000000000000000000010000000100000011000000100000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[29]  = bitset<nb_msg> (string("00000000000000000000000000000000000001000000010000001100000010000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[30]  = bitset<nb_msg> (string("00000000000000000000000000000000000000100000001000000110000001000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[31]  = bitset<nb_msg> (string("00000000000000000000000000000000000000010000000100000011000000100000000000000000000000000000000000000000000000000000000000000000"));
    lambda[32]  = bitset<nb_msg> (string("00000000000000000000000000000000000111011000000010000000100111010000000000000000000000000000000000000000000000000000000000000000"));
    lambda[33]  = bitset<nb_msg> (string("00000000000000000000000000000000100000000100000001000000110000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[34]  = bitset<nb_msg> (string("00000000000000000000000000000000010000000010000000100000011000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[35]  = bitset<nb_msg> (string("00000000000000000000000000000000001000000001000000010000001100000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[36]  = bitset<nb_msg> (string("00000000000000000000000000000000000100000000100000001000000110000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[37]  = bitset<nb_msg> (string("00000000000000000000000000000000000010000000010000000100000011000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[38]  = bitset<nb_msg> (string("00000000000000000000000000000000000001000000001000000010000001100000000000000000000000000000000000000000000000000000000000000000"));
    lambda[39]  = bitset<nb_msg> (string("00000000000000000000000000000000000000100000000100000001000000110000000000000000000000000000000000000000000000000000000000000000"));
    lambda[40]  = bitset<nb_msg> (string("10011101000111011000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[41]  = bitset<nb_msg> (string("11000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[42]  = bitset<nb_msg> (string("01100000010000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[43]  = bitset<nb_msg> (string("00110000001000000001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[44]  = bitset<nb_msg> (string("00011000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[45]  = bitset<nb_msg> (string("00001100000010000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[46]  = bitset<nb_msg> (string("00000110000001000000001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[47]  = bitset<nb_msg> (string("00000011000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[48]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100111010001110110000000"));
    lambda[49]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000110000001000000001000000"));
    lambda[50]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000011000000100000000100000"));
    lambda[51]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001100000010000000010000"));
    lambda[52]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000110000001000000001000"));
    lambda[53]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000011000000100000000100"));
    lambda[54]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001100000010000000010"));
    lambda[55]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000110000001000000001"));
    lambda[56]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000001000000010000000100111010001110100000000000000000000000000000000"));
    lambda[57]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000100000001000000110000001000000000000000000000000000000000000000"));
    lambda[58]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000010000000100000011000000100000000000000000000000000000000000000"));
    lambda[59]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000001000000010000001100000010000000000000000000000000000000000000"));
    lambda[60]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000100000001000000110000001000000000000000000000000000000000000"));
    lambda[61]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000010000000100000011000000100000000000000000000000000000000000"));
    lambda[62]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000001000000010000001100000010000000000000000000000000000000000"));
    lambda[63]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000100000001000000110000001000000000000000000000000000000000"));
    lambda[64]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000001110110000000100000001001110100000000000000000000000000000000"));
    lambda[65]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000001000000001000000010000001100000000000000000000000000000000000000"));
    lambda[66]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000100000000100000001000000110000000000000000000000000000000000000"));
    lambda[67]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000010000000010000000100000011000000000000000000000000000000000000"));
    lambda[68]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000001000000001000000010000001100000000000000000000000000000000000"));
    lambda[69]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000100000000100000001000000110000000000000000000000000000000000"));
    lambda[70]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000010000000010000000100000011000000000000000000000000000000000"));
    lambda[71]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000001000000001000000010000001100000000000000000000000000000000"));
    lambda[72]  = bitset<nb_msg> (string("00000000000000000000000000000000100111010001110110000000100000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[73]  = bitset<nb_msg> (string("00000000000000000000000000000000110000001000000001000000010000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[74]  = bitset<nb_msg> (string("00000000000000000000000000000000011000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[75]  = bitset<nb_msg> (string("00000000000000000000000000000000001100000010000000010000000100000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[76]  = bitset<nb_msg> (string("00000000000000000000000000000000000110000001000000001000000010000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[77]  = bitset<nb_msg> (string("00000000000000000000000000000000000011000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[78]  = bitset<nb_msg> (string("00000000000000000000000000000000000001100000010000000010000000100000000000000000000000000000000000000000000000000000000000000000"));
    lambda[79]  = bitset<nb_msg> (string("00000000000000000000000000000000000000110000001000000001000000010000000000000000000000000000000000000000000000000000000000000000"));
    lambda[80]  = bitset<nb_msg> (string("10000000100111010001110110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[81]  = bitset<nb_msg> (string("01000000110000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[82]  = bitset<nb_msg> (string("00100000011000000100000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[83]  = bitset<nb_msg> (string("00010000001100000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[84]  = bitset<nb_msg> (string("00001000000110000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[85]  = bitset<nb_msg> (string("00000100000011000000100000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[86]  = bitset<nb_msg> (string("00000010000001100000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[87]  = bitset<nb_msg> (string("00000001000000110000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[88]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000001001110100011101"));
    lambda[89]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000001100000010000000"));
    lambda[90]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001000000110000001000000"));
    lambda[91]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000011000000100000"));
    lambda[92]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000001100000010000"));
    lambda[93]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001000000110000001000"));
    lambda[94]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000011000000100"));
    lambda[95]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000010000001100000010"));
    lambda[96]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101100000001000000010011101"));
    lambda[97]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000010000000100000011000000"));
    lambda[98]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000001000000010000001100000"));
    lambda[99]  = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000100000001000000110000"));
    lambda[100] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000010000000100000011000"));
    lambda[101] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000001000000010000001100"));
    lambda[102] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000100000001000000110"));
    lambda[103] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000010000000100000011"));
    lambda[104] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000001001110100011101100000001000000000000000000000000000000000000000"));
    lambda[105] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000001100000010000000010000000100000000000000000000000000000000000000"));
    lambda[106] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000110000001000000001000000010000000000000000000000000000000000000"));
    lambda[107] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000011000000100000000100000001000000000000000000000000000000000000"));
    lambda[108] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000001100000010000000010000000100000000000000000000000000000000000"));
    lambda[109] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000110000001000000001000000010000000000000000000000000000000000"));
    lambda[110] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000011000000100000000100000001000000000000000000000000000000000"));
    lambda[111] = bitset<nb_msg> (string("00000000000000000000000000000000000000000000000000000000000000000000001100000010000000010000000100000000000000000000000000000000"));
    lambda[112] = bitset<nb_msg> (string("00000000000000000000000000000000100000001001110100011101100000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[113] = bitset<nb_msg> (string("00000000000000000000000000000000010000001100000010000000010000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[114] = bitset<nb_msg> (string("00000000000000000000000000000000001000000110000001000000001000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[115] = bitset<nb_msg> (string("00000000000000000000000000000000000100000011000000100000000100000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[116] = bitset<nb_msg> (string("00000000000000000000000000000000000010000001100000010000000010000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[117] = bitset<nb_msg> (string("00000000000000000000000000000000000001000000110000001000000001000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[118] = bitset<nb_msg> (string("00000000000000000000000000000000000000100000011000000100000000100000000000000000000000000000000000000000000000000000000000000000"));
    lambda[119] = bitset<nb_msg> (string("00000000000000000000000000000000000000010000001100000010000000010000000000000000000000000000000000000000000000000000000000000000"));
    lambda[120] = bitset<nb_msg> (string("10000000100000001001110100011101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[121] = bitset<nb_msg> (string("01000000010000001100000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[122] = bitset<nb_msg> (string("00100000001000000110000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[123] = bitset<nb_msg> (string("00010000000100000011000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[124] = bitset<nb_msg> (string("00001000000010000001100000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[125] = bitset<nb_msg> (string("00000100000001000000110000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[126] = bitset<nb_msg> (string("00000010000000100000011000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    lambda[127] = bitset<nb_msg> (string("00000001000000010000001100000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    */
    }

  return c ;
}

/*!
Mixing-Layer Inverse STEP.
*/
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::msgType
Bunny24m24k<nb_sbox,nround>::mixingLayerInverse (msgType m ){
    unsigned const nb_msg = 24 ;
  bitset<nb_msg> lambda[nb_msg] ;
  msgType c ;
  //creazione di lambda
  if (m.size() == 24){
    lambda[0]  = bitset<nb_msg> (string("010100111011001100100010"));
    lambda[1]  = bitset<nb_msg> (string("001010110000000110010001"));
    lambda[2]  = bitset<nb_msg> (string("000101011000000011100101"));
    lambda[3]  = bitset<nb_msg> (string("101111001100101100111111"));
    lambda[4]  = bitset<nb_msg> (string("111010000110010110110010"));
    lambda[5]  = bitset<nb_msg> (string("011101000011001011011001"));
    lambda[6]  = bitset<nb_msg> (string("010101001011011110100101"));
    lambda[7]  = bitset<nb_msg> (string("100111101000001111111111"));
    lambda[8]  = bitset<nb_msg> (string("111110010100101010110010"));
    lambda[9]  = bitset<nb_msg> (string("011111001010010101011001"));
    lambda[10] = bitset<nb_msg> (string("100010000101100111100001"));
    lambda[11] = bitset<nb_msg> (string("010001101111111110111101"));
    lambda[12] = bitset<nb_msg> (string("001101111000010011000001"));
    lambda[13] = bitset<nb_msg> (string("101011011100100100101101"));
    lambda[14] = bitset<nb_msg> (string("111000001110010010111011"));
    lambda[15] = bitset<nb_msg> (string("011100000111001001110000"));
    lambda[16] = bitset<nb_msg> (string("001110101110101001011000"));
    lambda[17] = bitset<nb_msg> (string("000111010111111001001100"));
    lambda[18] = bitset<nb_msg> (string("101100101000100001100110"));
    lambda[19] = bitset<nb_msg> (string("010110010100111101010011"));
    lambda[20] = bitset<nb_msg> (string("001011001010110011100100"));
    lambda[21] = bitset<nb_msg> (string("101000000101110100010010"));
    lambda[22] = bitset<nb_msg> (string("010100101111011010001001"));
    lambda[23] = bitset<nb_msg> (string("001010111010001101101001"));
  }
  else if (m.size() == 128){
      /*
      lambda[0]  = bitset<nb_msg> (string("01010011000000000000000000000000000000001111010000000000000000000000000000000000110011100000000000000000000000000000000011101001"));
      lambda[1]  = bitset<nb_msg> (string("10100111000000000000000000000000000000000111101000000000000000000000000000000000011001110000000000000000000000000000000011111010"));
      lambda[2]  = bitset<nb_msg> (string("11011101000000000000000000000000000000000011110100000000000000000000000000000000101111010000000000000000000000000000000001111101"));
      lambda[3]  = bitset<nb_msg> (string("11100000000000000000000000000000000000001001000000000000000000000000000000000000110100000000000000000000000000000000000010110000"));
      lambda[4]  = bitset<nb_msg> (string("01110000000000000000000000000000000000000100100000000000000000000000000000000000011010000000000000000000000000000000000001011000"));
      lambda[5]  = bitset<nb_msg> (string("00111000000000000000000000000000000000000010010000000000000000000000000000000000001101000000000000000000000000000000000000101100"));
      lambda[6]  = bitset<nb_msg> (string("00011100000000000000000000000000000000000001001000000000000000000000000000000000000110100000000000000000000000000000000000010110"));
      lambda[7]  = bitset<nb_msg> (string("00001110000000000000000000000000000000000000100100000000000000000000000000000000000011010000000000000000000000000000000000001011"));
      lambda[8]  = bitset<nb_msg> (string("11101001000000000000000000000000000000000101001100000000000000000000000000000000111101000000000000000000000000000000000011001110"));
      lambda[9]  = bitset<nb_msg> (string("11111010000000000000000000000000000000001010011100000000000000000000000000000000011110100000000000000000000000000000000001100111"));
      lambda[10] = bitset<nb_msg> (string("01111101000000000000000000000000000000001101110100000000000000000000000000000000001111010000000000000000000000000000000010111101"));
      lambda[11] = bitset<nb_msg> (string("10110000000000000000000000000000000000001110000000000000000000000000000000000000100100000000000000000000000000000000000011010000"));
      lambda[12] = bitset<nb_msg> (string("01011000000000000000000000000000000000000111000000000000000000000000000000000000010010000000000000000000000000000000000001101000"));
      lambda[13] = bitset<nb_msg> (string("00101100000000000000000000000000000000000011100000000000000000000000000000000000001001000000000000000000000000000000000000110100"));
      lambda[14] = bitset<nb_msg> (string("00010110000000000000000000000000000000000001110000000000000000000000000000000000000100100000000000000000000000000000000000011010"));
      lambda[15] = bitset<nb_msg> (string("00001011000000000000000000000000000000000000111000000000000000000000000000000000000010010000000000000000000000000000000000001101"));
      lambda[16] = bitset<nb_msg> (string("11001110000000000000000000000000000000001110100100000000000000000000000000000000010100110000000000000000000000000000000011110100"));
      lambda[17] = bitset<nb_msg> (string("01100111000000000000000000000000000000001111101000000000000000000000000000000000101001110000000000000000000000000000000001111010"));
      lambda[18] = bitset<nb_msg> (string("10111101000000000000000000000000000000000111110100000000000000000000000000000000110111010000000000000000000000000000000000111101"));
      lambda[19] = bitset<nb_msg> (string("11010000000000000000000000000000000000001011000000000000000000000000000000000000111000000000000000000000000000000000000010010000"));
      lambda[20] = bitset<nb_msg> (string("01101000000000000000000000000000000000000101100000000000000000000000000000000000011100000000000000000000000000000000000001001000"));
      lambda[21] = bitset<nb_msg> (string("00110100000000000000000000000000000000000010110000000000000000000000000000000000001110000000000000000000000000000000000000100100"));
      lambda[22] = bitset<nb_msg> (string("00011010000000000000000000000000000000000001011000000000000000000000000000000000000111000000000000000000000000000000000000010010"));
      lambda[23] = bitset<nb_msg> (string("00001101000000000000000000000000000000000000101100000000000000000000000000000000000011100000000000000000000000000000000000001001"));
      lambda[24] = bitset<nb_msg> (string("11110100000000000000000000000000000000001100111000000000000000000000000000000000111010010000000000000000000000000000000001010011"));
      lambda[25] = bitset<nb_msg> (string("01111010000000000000000000000000000000000110011100000000000000000000000000000000111110100000000000000000000000000000000010100111"));
      lambda[26] = bitset<nb_msg> (string("00111101000000000000000000000000000000001011110100000000000000000000000000000000011111010000000000000000000000000000000011011101"));
      lambda[27] = bitset<nb_msg> (string("10010000000000000000000000000000000000001101000000000000000000000000000000000000101100000000000000000000000000000000000011100000"));
      lambda[28] = bitset<nb_msg> (string("01001000000000000000000000000000000000000110100000000000000000000000000000000000010110000000000000000000000000000000000001110000"));
      lambda[29] = bitset<nb_msg> (string("00100100000000000000000000000000000000000011010000000000000000000000000000000000001011000000000000000000000000000000000000111000"));
      lambda[30] = bitset<nb_msg> (string("00010010000000000000000000000000000000000001101000000000000000000000000000000000000101100000000000000000000000000000000000011100"));
      lambda[31] = bitset<nb_msg> (string("00001001000000000000000000000000000000000000110100000000000000000000000000000000000010110000000000000000000000000000000000001110"));
      lambda[32] = bitset<nb_msg> (string("00000000000000000000000011101001010100110000000000000000000000000000000011110100000000000000000000000000000000001100111000000000"));
      lambda[33] = bitset<nb_msg> (string("00000000000000000000000011111010101001110000000000000000000000000000000001111010000000000000000000000000000000000110011100000000"));
      lambda[34] = bitset<nb_msg> (string("00000000000000000000000001111101110111010000000000000000000000000000000000111101000000000000000000000000000000001011110100000000"));
      lambda[35] = bitset<nb_msg> (string("00000000000000000000000010110000111000000000000000000000000000000000000010010000000000000000000000000000000000001101000000000000"));
      lambda[36] = bitset<nb_msg> (string("00000000000000000000000001011000011100000000000000000000000000000000000001001000000000000000000000000000000000000110100000000000"));
      lambda[37] = bitset<nb_msg> (string("00000000000000000000000000101100001110000000000000000000000000000000000000100100000000000000000000000000000000000011010000000000"));
      lambda[38] = bitset<nb_msg> (string("00000000000000000000000000010110000111000000000000000000000000000000000000010010000000000000000000000000000000000001101000000000"));
      lambda[39] = bitset<nb_msg> (string("00000000000000000000000000001011000011100000000000000000000000000000000000001001000000000000000000000000000000000000110100000000"));
      lambda[40] = bitset<nb_msg> (string("00000000000000000000000011001110111010010000000000000000000000000000000001010011000000000000000000000000000000001111010000000000"));
      lambda[41] = bitset<nb_msg> (string("00000000000000000000000001100111111110100000000000000000000000000000000010100111000000000000000000000000000000000111101000000000"));
      lambda[42] = bitset<nb_msg> (string("00000000000000000000000010111101011111010000000000000000000000000000000011011101000000000000000000000000000000000011110100000000"));
      lambda[43] = bitset<nb_msg> (string("00000000000000000000000011010000101100000000000000000000000000000000000011100000000000000000000000000000000000001001000000000000"));
      lambda[44] = bitset<nb_msg> (string("00000000000000000000000001101000010110000000000000000000000000000000000001110000000000000000000000000000000000000100100000000000"));
      lambda[45] = bitset<nb_msg> (string("00000000000000000000000000110100001011000000000000000000000000000000000000111000000000000000000000000000000000000010010000000000"));
      lambda[46] = bitset<nb_msg> (string("00000000000000000000000000011010000101100000000000000000000000000000000000011100000000000000000000000000000000000001001000000000"));
      lambda[47] = bitset<nb_msg> (string("00000000000000000000000000001101000010110000000000000000000000000000000000001110000000000000000000000000000000000000100100000000"));
      lambda[48] = bitset<nb_msg> (string("00000000000000000000000011110100110011100000000000000000000000000000000011101001000000000000000000000000000000000101001100000000"));
      lambda[49] = bitset<nb_msg> (string("00000000000000000000000001111010011001110000000000000000000000000000000011111010000000000000000000000000000000001010011100000000"));
      lambda[50] = bitset<nb_msg> (string("00000000000000000000000000111101101111010000000000000000000000000000000001111101000000000000000000000000000000001101110100000000"));
      lambda[51] = bitset<nb_msg> (string("00000000000000000000000010010000110100000000000000000000000000000000000010110000000000000000000000000000000000001110000000000000"));
      lambda[52] = bitset<nb_msg> (string("00000000000000000000000001001000011010000000000000000000000000000000000001011000000000000000000000000000000000000111000000000000"));
      lambda[53] = bitset<nb_msg> (string("00000000000000000000000000100100001101000000000000000000000000000000000000101100000000000000000000000000000000000011100000000000"));
      lambda[54] = bitset<nb_msg> (string("00000000000000000000000000010010000110100000000000000000000000000000000000010110000000000000000000000000000000000001110000000000"));
      lambda[55] = bitset<nb_msg> (string("00000000000000000000000000001001000011010000000000000000000000000000000000001011000000000000000000000000000000000000111000000000"));
      lambda[56] = bitset<nb_msg> (string("00000000000000000000000001010011111101000000000000000000000000000000000011001110000000000000000000000000000000001110100100000000"));
      lambda[57] = bitset<nb_msg> (string("00000000000000000000000010100111011110100000000000000000000000000000000001100111000000000000000000000000000000001111101000000000"));
      lambda[58] = bitset<nb_msg> (string("00000000000000000000000011011101001111010000000000000000000000000000000010111101000000000000000000000000000000000111110100000000"));
      lambda[59] = bitset<nb_msg> (string("00000000000000000000000011100000100100000000000000000000000000000000000011010000000000000000000000000000000000001011000000000000"));
      lambda[60] = bitset<nb_msg> (string("00000000000000000000000001110000010010000000000000000000000000000000000001101000000000000000000000000000000000000101100000000000"));
      lambda[61] = bitset<nb_msg> (string("00000000000000000000000000111000001001000000000000000000000000000000000000110100000000000000000000000000000000000010110000000000"));
      lambda[62] = bitset<nb_msg> (string("00000000000000000000000000011100000100100000000000000000000000000000000000011010000000000000000000000000000000000001011000000000"));
      lambda[63] = bitset<nb_msg> (string("00000000000000000000000000001110000010010000000000000000000000000000000000001101000000000000000000000000000000000000101100000000"));
      lambda[64] = bitset<nb_msg> (string("00000000000000001100111000000000000000000000000000000000111010010101001100000000000000000000000000000000111101000000000000000000"));
      lambda[65] = bitset<nb_msg> (string("00000000000000000110011100000000000000000000000000000000111110101010011100000000000000000000000000000000011110100000000000000000"));
      lambda[66] = bitset<nb_msg> (string("00000000000000001011110100000000000000000000000000000000011111011101110100000000000000000000000000000000001111010000000000000000"));
      lambda[67] = bitset<nb_msg> (string("00000000000000001101000000000000000000000000000000000000101100001110000000000000000000000000000000000000100100000000000000000000"));
      lambda[68] = bitset<nb_msg> (string("00000000000000000110100000000000000000000000000000000000010110000111000000000000000000000000000000000000010010000000000000000000"));
      lambda[69] = bitset<nb_msg> (string("00000000000000000011010000000000000000000000000000000000001011000011100000000000000000000000000000000000001001000000000000000000"));
      lambda[70] = bitset<nb_msg> (string("00000000000000000001101000000000000000000000000000000000000101100001110000000000000000000000000000000000000100100000000000000000"));
      lambda[71] = bitset<nb_msg> (string("00000000000000000000110100000000000000000000000000000000000010110000111000000000000000000000000000000000000010010000000000000000"));
      lambda[72] = bitset<nb_msg> (string("00000000000000001111010000000000000000000000000000000000110011101110100100000000000000000000000000000000010100110000000000000000"));
      lambda[73] = bitset<nb_msg> (string("00000000000000000111101000000000000000000000000000000000011001111111101000000000000000000000000000000000101001110000000000000000"));
      lambda[74] = bitset<nb_msg> (string("00000000000000000011110100000000000000000000000000000000101111010111110100000000000000000000000000000000110111010000000000000000"));
      lambda[75] = bitset<nb_msg> (string("00000000000000001001000000000000000000000000000000000000110100001011000000000000000000000000000000000000111000000000000000000000"));
      lambda[76] = bitset<nb_msg> (string("00000000000000000100100000000000000000000000000000000000011010000101100000000000000000000000000000000000011100000000000000000000"));
      lambda[77] = bitset<nb_msg> (string("00000000000000000010010000000000000000000000000000000000001101000010110000000000000000000000000000000000001110000000000000000000"));
      lambda[78] = bitset<nb_msg> (string("00000000000000000001001000000000000000000000000000000000000110100001011000000000000000000000000000000000000111000000000000000000"));
      lambda[79] = bitset<nb_msg> (string("00000000000000000000100100000000000000000000000000000000000011010000101100000000000000000000000000000000000011100000000000000000"));
      lambda[80] = bitset<nb_msg> (string("00000000000000000101001100000000000000000000000000000000111101001100111000000000000000000000000000000000111010010000000000000000"));
      lambda[81] = bitset<nb_msg> (string("00000000000000001010011100000000000000000000000000000000011110100110011100000000000000000000000000000000111110100000000000000000"));
      lambda[82] = bitset<nb_msg> (string("00000000000000001101110100000000000000000000000000000000001111011011110100000000000000000000000000000000011111010000000000000000"));
      lambda[83] = bitset<nb_msg> (string("00000000000000001110000000000000000000000000000000000000100100001101000000000000000000000000000000000000101100000000000000000000"));
      lambda[84] = bitset<nb_msg> (string("00000000000000000111000000000000000000000000000000000000010010000110100000000000000000000000000000000000010110000000000000000000"));
      lambda[85] = bitset<nb_msg> (string("00000000000000000011100000000000000000000000000000000000001001000011010000000000000000000000000000000000001011000000000000000000"));
      lambda[86] = bitset<nb_msg> (string("00000000000000000001110000000000000000000000000000000000000100100001101000000000000000000000000000000000000101100000000000000000"));
      lambda[87] = bitset<nb_msg> (string("00000000000000000000111000000000000000000000000000000000000010010000110100000000000000000000000000000000000010110000000000000000"));
      lambda[88] = bitset<nb_msg> (string("00000000000000001110100100000000000000000000000000000000010100111111010000000000000000000000000000000000110011100000000000000000"));
      lambda[89] = bitset<nb_msg> (string("00000000000000001111101000000000000000000000000000000000101001110111101000000000000000000000000000000000011001110000000000000000"));
      lambda[90] = bitset<nb_msg> (string("00000000000000000111110100000000000000000000000000000000110111010011110100000000000000000000000000000000101111010000000000000000"));
      lambda[91] = bitset<nb_msg> (string("00000000000000001011000000000000000000000000000000000000111000001001000000000000000000000000000000000000110100000000000000000000"));
      lambda[92] = bitset<nb_msg> (string("00000000000000000101100000000000000000000000000000000000011100000100100000000000000000000000000000000000011010000000000000000000"));
      lambda[93] = bitset<nb_msg> (string("00000000000000000010110000000000000000000000000000000000001110000010010000000000000000000000000000000000001101000000000000000000"));
      lambda[94] = bitset<nb_msg> (string("00000000000000000001011000000000000000000000000000000000000111000001001000000000000000000000000000000000000110100000000000000000"));
      lambda[95] = bitset<nb_msg> (string("00000000000000000000101100000000000000000000000000000000000011100000100100000000000000000000000000000000000011010000000000000000"));
      lambda[96] = bitset<nb_msg> (string("00000000111101000000000000000000000000000000000011001110000000000000000000000000000000001110100101010011000000000000000000000000"));
      lambda[97] = bitset<nb_msg> (string("00000000011110100000000000000000000000000000000001100111000000000000000000000000000000001111101010100111000000000000000000000000"));
      lambda[98] = bitset<nb_msg> (string("00000000001111010000000000000000000000000000000010111101000000000000000000000000000000000111110111011101000000000000000000000000"));
      lambda[99] = bitset<nb_msg> (string("00000000100100000000000000000000000000000000000011010000000000000000000000000000000000001011000011100000000000000000000000000000"));
      lambda[100]= bitset<nb_msg> (string("00000000010010000000000000000000000000000000000001101000000000000000000000000000000000000101100001110000000000000000000000000000"));
      lambda[101]= bitset<nb_msg> (string("00000000001001000000000000000000000000000000000000110100000000000000000000000000000000000010110000111000000000000000000000000000"));
      lambda[102]= bitset<nb_msg> (string("00000000000100100000000000000000000000000000000000011010000000000000000000000000000000000001011000011100000000000000000000000000"));
      lambda[103]= bitset<nb_msg> (string("00000000000010010000000000000000000000000000000000001101000000000000000000000000000000000000101100001110000000000000000000000000"));
      lambda[104]= bitset<nb_msg> (string("00000000010100110000000000000000000000000000000011110100000000000000000000000000000000001100111011101001000000000000000000000000"));
      lambda[105]= bitset<nb_msg> (string("00000000101001110000000000000000000000000000000001111010000000000000000000000000000000000110011111111010000000000000000000000000"));
      lambda[106]= bitset<nb_msg> (string("00000000110111010000000000000000000000000000000000111101000000000000000000000000000000001011110101111101000000000000000000000000"));
      lambda[107]= bitset<nb_msg> (string("00000000111000000000000000000000000000000000000010010000000000000000000000000000000000001101000010110000000000000000000000000000"));
      lambda[108]= bitset<nb_msg> (string("00000000011100000000000000000000000000000000000001001000000000000000000000000000000000000110100001011000000000000000000000000000"));
      lambda[109]= bitset<nb_msg> (string("00000000001110000000000000000000000000000000000000100100000000000000000000000000000000000011010000101100000000000000000000000000"));
      lambda[110]= bitset<nb_msg> (string("00000000000111000000000000000000000000000000000000010010000000000000000000000000000000000001101000010110000000000000000000000000"));
      lambda[111]= bitset<nb_msg> (string("00000000000011100000000000000000000000000000000000001001000000000000000000000000000000000000110100001011000000000000000000000000"));
      lambda[112]= bitset<nb_msg> (string("00000000111010010000000000000000000000000000000001010011000000000000000000000000000000001111010011001110000000000000000000000000"));
      lambda[113]= bitset<nb_msg> (string("00000000111110100000000000000000000000000000000010100111000000000000000000000000000000000111101001100111000000000000000000000000"));
      lambda[114]= bitset<nb_msg> (string("00000000011111010000000000000000000000000000000011011101000000000000000000000000000000000011110110111101000000000000000000000000"));
      lambda[115]= bitset<nb_msg> (string("00000000101100000000000000000000000000000000000011100000000000000000000000000000000000001001000011010000000000000000000000000000"));
      lambda[116]= bitset<nb_msg> (string("00000000010110000000000000000000000000000000000001110000000000000000000000000000000000000100100001101000000000000000000000000000"));
      lambda[117]= bitset<nb_msg> (string("00000000001011000000000000000000000000000000000000111000000000000000000000000000000000000010010000110100000000000000000000000000"));
      lambda[118]= bitset<nb_msg> (string("00000000000101100000000000000000000000000000000000011100000000000000000000000000000000000001001000011010000000000000000000000000"));
      lambda[119]= bitset<nb_msg> (string("00000000000010110000000000000000000000000000000000001110000000000000000000000000000000000000100100001101000000000000000000000000"));
      lambda[120]= bitset<nb_msg> (string("00000000110011100000000000000000000000000000000011101001000000000000000000000000000000000101001111110100000000000000000000000000"));
      lambda[121]= bitset<nb_msg> (string("00000000011001110000000000000000000000000000000011111010000000000000000000000000000000001010011101111010000000000000000000000000"));
      lambda[122]= bitset<nb_msg> (string("00000000101111010000000000000000000000000000000001111101000000000000000000000000000000001101110100111101000000000000000000000000"));
      lambda[123]= bitset<nb_msg> (string("00000000110100000000000000000000000000000000000010110000000000000000000000000000000000001110000010010000000000000000000000000000"));
      lambda[124]= bitset<nb_msg> (string("00000000011010000000000000000000000000000000000001011000000000000000000000000000000000000111000001001000000000000000000000000000"));
      lambda[125]= bitset<nb_msg> (string("00000000001101000000000000000000000000000000000000101100000000000000000000000000000000000011100000100100000000000000000000000000"));
      lambda[126]= bitset<nb_msg> (string("00000000000110100000000000000000000000000000000000010110000000000000000000000000000000000001110000010010000000000000000000000000"));
      lambda[127]= bitset<nb_msg> (string("00000000000011010000000000000000000000000000000000001011000000000000000000000000000000000000111000001001000000000000000000000000"));
      */
  }

  // To acces element (I,J) of matrix lambda use:
  // lambda(I,J) = lambda[I+J*nb_msg]
  //vector x matrix PRODUCT
  for ( unsigned i = 0 ; i < nb_msg ; ++i ){
    c[i] = 0 ;
    for ( unsigned j = 0 ; j < nb_msg ; ++j ) {
      c[i] = c[i] ^ ( m[j] & lambda[nb_msg-j-1][i] ) ;
    }
  }
  /*for ( unsigned i = 0 ; i < nb_msg ; ++i ){
    c[i] = 0 ;
    for ( unsigned j = 0 ; j < nb_msg ; ++j ) {
      c[i] = c[i] ^ ( m[j] & lambda[i+j*nb_msg] ) ;
    }
  }*/

  return c ;
}

//////////////////////
//////BUNNY SBOX//////
//////////////////////

//! S-Boxes.
/*!
S-box 1.

\f$ x^{62} \f$ over \f$ F_2^6 \f$ where \f$ F \f$ is the field \f$ {0,1} \f$ --> Equivalent to Inversion.

This sbox is 4-differential and weakly APN.

EX:

000000 -> 000000

000010 -> 101101 ...

bitset<6> s1_table[2] = {

000000,000001,101101,110110,111011,010010,011011,011110,110000,001010,001001,110001,100000,111110,001111,001110,

011000,110011,000101,111010,101001,111000,110101,100011,010000,110010,011111,000110,101010,100110,000111,011010,

001100,111111,110100,010111,101111,111101,011101,101011,111001,010100,011100,100111,110111,000010,111100,100100,

001000,001011,011001,010001,100010,010110,000011,101100,010101,101000,010011,000100,101110,100101,001101,100001 };

------------------------------------------------------------------------------------------------------------------

S-box 2.

\f$ x^5 \f$ over \f$ F_2^6 \f$ where \f$ F \f$ is the field \f$ {0,1} \f$ .

This sbox is 4-differential, but NO weakly APN.

EX:
000000 -> 000000

000010 -> 100000 ...

bitset<6> s2_table[64] = {

000000,000001,100000,110011,110001,000011,111111,011111,100100,000100,111011,001001,111110,101101,001111,001110,

000111,000101,110110,100110,001000,111001,010111,110100,011110,111101,010000,100001,111010,101010,011010,011000,

001101,101011,010110,100010,101001,111100,011100,011011,110111,110000,010011,000110,111000,001100,110010,010100,

101111,001010,100101,010010,110101,100011,010001,010101,101000,101100,011101,001011,011001,101110,000010,100111};

------------------------------------------------------------------------------------------------------------------

S-box 3.

\f$ x^17 \f$ over \f$ F_2^6 \f$ where \f$ F \f$ is the field \f$ {0,1} \f$ .

This sbox is 4-differential, but NO weakly APN.

EX:

000000 -> 000000

000010 -> 100110 ...

------------------------------------------------------------------------------------------------------------------

S-box 4.

\f$ x^62 + e^2 \f$ over \f$ F_2^6 \f$ where \f$ F \f$ is the field \f$ {0,1} \f$ .

This sbox is 4-differential, and weakly APN.

EX:

000000 -> 000000

000010 ->  ...
*/

template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::sboxType
Bunny24m24k<nb_sbox,nround>::sbox(unsigned nbox, sboxType x) {

  int s_table[4][64] = { {   0,  1, 45, 54, 59, 18, 27, 30, 48, 10,  9, 49, 32, 62, 15, 14,
                            24, 51,  5, 58, 41, 56, 53, 35, 16, 50, 31,  6, 42, 38,  7, 26,
                            12, 63, 52, 23, 47, 61, 29, 43, 57, 20, 28, 39, 55,  2, 60, 36,
                             8, 11, 25, 17, 34, 22,  3, 44, 21, 40, 19,  4, 46, 37, 13, 33  },
                        {    0,  1, 32, 51, 49,  3, 63, 31, 36,  4, 59,  9, 62, 45, 15, 14,
                             7,  5, 54, 38,  8, 57, 23, 52, 30, 61, 16, 33, 58, 42, 26, 24,
                            13, 43, 22, 34, 41, 60, 28, 27, 55, 48, 19,  6, 56, 12, 50, 20,
                            47, 10, 37, 18, 53, 35, 17, 21, 40, 44, 29, 11, 25, 46,  2, 39  },
                        {    0,  1, 38, 54, 37, 18, 43, 13, 20, 50, 25, 46, 42, 58, 15, 14,
                            32, 51,  5,  7, 47, 10, 34, 22, 12, 56,  2, 39, 24, 26, 62, 45,
                            28, 27, 35, 53,  8, 57, 31, 63,  4, 36, 16, 33, 11, 29, 55, 48,
                            41, 60, 21, 17, 23, 52,  3, 49,  9, 59, 30, 61, 44, 40, 19,  6  },
                        {   4,  5, 34, 50, 33, 22, 47,  9, 16, 54, 29, 42, 46, 62, 11, 10,
                           36, 55,  1,  3, 43, 14, 38, 18,  8, 60,  6, 35, 28, 30, 58, 41,
                           24, 31, 39, 49, 12, 61, 27, 59,  0, 32, 20, 37, 15, 25, 51, 52,
                           45, 56, 17, 21, 19, 48,  7, 53, 13, 63, 26, 57, 40, 44, 23,  2   } } ;
  return sboxType ( s_table[nbox][x.to_ulong()] ) ;
}

//! Inverse of the S-Boxes
template <unsigned nb_sbox, unsigned nround>
inline
typename Bunny24m24k<nb_sbox,nround>::sboxType
Bunny24m24k<nb_sbox,nround>::sboxInverse(unsigned nbox, sboxType x) {
  static int sInv_table[4][64] = {   {  0,  1, 45, 54, 59, 18, 27, 30, 48, 10,  9, 49, 32, 62, 15, 14,
                                     24, 51,  5, 58, 41, 56, 53, 35, 16, 50, 31,  6, 42, 38,  7, 26,
                                     12, 63, 52, 23, 47, 61, 29, 43, 57, 20, 28, 39, 55,  2, 60, 36,
                                      8, 11, 25, 17, 34, 22,  3, 44, 21, 40, 19,  4, 46, 37, 13, 33  },
                                     {  0,  1, 62,  5,  9, 17, 43, 16, 20, 11, 49, 59, 45, 32, 15, 14,
                                       26, 54, 51, 42, 47, 55, 34, 22, 31, 60, 30, 39, 38, 58, 24,  7,
                                        2, 27, 35, 53,  8, 50, 19, 63, 56, 36, 29, 33, 57, 13, 61, 48,
                                       41,  4, 46,  3, 23, 52, 18, 40, 44, 21, 28, 10, 37, 25,  12, 6  },
                                     {  0,  1, 26, 54, 40, 18, 63, 19, 36, 56, 21, 44, 24,  7, 15, 14,
                                       42, 51,  5, 62,  8, 50, 23, 52, 28, 10, 29, 33, 32, 45, 58, 38,
                                       16, 43, 22, 34, 41,  4,  2, 27, 61, 48, 12,  6, 60, 31, 11, 20,
                                       47, 55,  9, 17, 53, 35,  3, 46, 25, 37, 13, 57, 49, 59, 30, 39  },
                                     { 40, 18, 63, 19,  0,  1, 26, 54, 24,  7, 15, 14, 36, 56, 21, 44,
                                        8, 50, 23, 52, 42, 51,  5, 62, 32, 45, 58, 38, 28, 10, 29, 33,
                                       41,  4,  2, 27, 16, 43, 22, 34, 60, 31, 11, 20, 61, 48, 12,  6,
                                       53, 35,  3, 46, 47, 55,  9, 17, 49, 59, 30, 39, 25, 37, 13, 57  } } ;
  return sboxType ( sInv_table[nbox][x.to_ulong()] );
}

